project structure:
    --_tests // unit test using gtest framework(setup included in cmake)

    --assets // used to store image and Font

    --includes // where all of the sfml templates reside
      --button // clickable button class, and buttons class for the button used in this project
      --config // managing global resource, and system variables
      --engine // processing input/output and updating the screen
      --header // header class to show text and draw to the screen
      --input_box // input box that allows user to input from Keyboard
      --retrieve_data // retrieve data from engine

    --lib // where all of the non sfml headers reside
      --lib_include_test // used to test the linking in cmake for lib folder works
      --cmd_parser // used to parse command
      --folder_file_manager // used to manager file and folder iomanip
      --trie // trie class
      --trie_node // trie node struct
      --utils // global helper functions
      
    --app // where all of the sfml headers for this project reside
      --app_include_test // used to test the linking in cmake for app folder works
      --command_line // a command line class that can take input and parse command
    --main.cpp // the main entry of the program

    --design.txt // project introduction

    --CMakeLists.txt // cmake for this project


// todo
- design a data retriver class for engine
  -after complete the getter use it into the write method in filefolder manager
- design a text file sytem that allows user to
  1. do prefix search 
  2. undo for the 5 most recent save 
- CMD output
  1. design a scroll functionality that allows user to scroll up and down to see the 
     output or limit the number of files and folders
  4. make the terminal clickable, so when
     - file is clicked: open the file
     - folder is clicked: make the folder the root dir
- CMD command
  1. design an open command that can open the file in a dir(need to fix to load previous content)
  2. design a save command that can save the files
  3. design a command that can clear all the directory
  4. design a command that can clear all the files
  5. design a command that can do the compound of #3 and #4
  6. design a move command that can move the file into designated location(hard)
  7. design a move command that can move the folder into designated location included its subdir(very hard)

// improve
change the map(value) of parser to struct instead of vector 
parsing flag and multiple subcommands



source code of nary tree 


#include <iostream>
#include <vector>
#include <string>
#include <memory>
using namespace std;

// define the n-ary tree node structure
template<class T>
struct Node {
    T data;
    vector<shared_ptr<Node<T>>> children;
};

// function to print the subtree rooted at a node
template<class T>
void printSubtree(shared_ptr<Node<T>> node, int depth, bool lastChild) {
    // print the node's data with appropriate indentation and prefix
    for (int i = 0; i < depth - 1; i++) {
        cout << "   ";
    }
    cout << (lastChild ? "└──" : "├──");
    cout << node->data << endl;

    // recursively print each child node
    for (int i = 0; i < node->children.size(); i++) {
        bool isLastChild = (i == node->children.size() - 1);
        printSubtree(node->children[i], depth + 1, isLastChild);
    }
}

// function to print the entire tree
template<class T>
void printTree(shared_ptr<Node<T>> root) {
    printSubtree(root, 1, true);
}



template<class T>
void printSubtreeStr(shared_ptr<Node<T>> node, int depth, bool lastChild, string& output) {
    // append the node's data with appropriate indentation and prefix
    for (int i = 0; i < depth - 1; i++) {
        output += "    ";
    }
    output += (lastChild ? "└──" : "├──");
    output += node->data + "\n";

    // recursively print each child node
    for (int i = 0; i < node->children.size(); i++) {
        bool isLastChild = (i == node->children.size() - 1);
        printSubtreeStr(node->children[i], depth + 1, isLastChild, output);
    }
}

// function to print the entire tree
template<class T>
string treeToString(shared_ptr<Node<T>> root) {
    string output;
    printSubtreeStr(root, 1, true, output);
    return output;
}





// example usage
int main() {
    // create an example n-ary tree
    // auto root = make_shared<Node<string>>({"test1", {}});
    vector<shared_ptr<Node<string>>> vec;
    for(int i = 0; i <= 8; ++i)
    {
        auto root = make_shared<Node<string>>();
        root->data = "test" + to_string(i);
        root->children = {};
        vec.push_back(root);
    }
    
    vec[0]->children = {vec[1], vec[2], vec[3]};
    vec[1]->children = {vec[4], vec[5]};
    vec[4]->children = {vec[6], vec[7]};
    // print the tree using ASCII characters
    printTree(vec[0]);
    cout << endl;
    string output = treeToString(vec[0]);
    cout << output;
    return 0;
}

